#Kene
from machine import Pin, PWM, I2C
import time
from time import sleep

servoFunnel = PWM(Pin(37), freq=50)
switchFunnel = Pin(2, Pin.IN, Pin.PULL_DOWN)    
servoMixer = PWM(Pin(38), freq=50)
#switchPump = Pin(5, Pin.IN, Pin

UPPER_LIMIT_WATER = 300 #This is the upper limit of water (As an example)
powder_conversion = 0.2 #3/8 g protein / lb of weight is the recommended amount
water_conversion = 10.0/3.0 #Check the type of powder for exact conversion (For this example, we'll use 20g water / 3 g protein)

def calculate_protein():
    print("Enter your weight (in lbs):")
    weight = float(input())
    if weight*powder_conversion*water_conversion > UPPER_LIMIT_WATER: #If the amount of powder exeeds the max the cup can hold
        return UPPER_LIMIT_WATER*1.0/water_conversion
    return weight*1.0*(powder_conversion)
    
def calculate_water(grams_protein):
    #1g of water = 1 mL
    return grams_protein*1.0*(water_conversion)
    
grams_protein = calculate_protein()
time_water = calculate_water(grams_protein)
print("Protein (g):", grams_protein, "Recommended Water (sec): ", time_water)
print("(1 scoop is about 30g)")

#0.91 ml/second 100

while True:
   if (switchFunnel.value() == 0):
       servoFunnel.duty(130)
       sleep(0.2)
       
       servoMixer.duty(20)
       time.sleep(0.5)
       servoMixer.duty(130)
       time.sleep(0.5)
       
   if (switchFunnel.value() == 1):
       servoFunnel.duty(75)
       sleep(0.2)
       
       servoMixer.duty(20)
       time.sleep(0.5)
       servoMixer.duty(130)
       time.sleep(0.5)

'''       

while True:
    servo.duty(20)
    time.sleep(0.5)
    servo.duty(130)
    time.sleep(0.5)

'''

#Riley
#Riley Becker En1, Prof Carlson
# 12/16/24
#This program will calculate an amount of water and protein powder necessary to add based on a user's specific weight


#200 lbs -> 75 g of protein (World Health Org safe lower limit)
#That's 3/8 g protein / lb of weight

#Variables stored here:

#Functions
'''
def calculate_protein():
    print("Enter your weight (in lbs):")
    weight = float(input())
    if weight*powder_conversion*water_conversion > UPPER_LIMIT_WATER: #If the amount of powder exeeds the max the cup can hold
        return UPPER_LIMIT_WATER*1.0/water_conversion
    return weight*1.0*(powder_conversion)
    
def calculate_water(grams_protein):
    #1g of water = 1 mL
    return grams_protein*1.0*(water_conversion)
    
grams_protein = calculate_protein()
grams_water = calculate_water(grams_protein)

#print("Protein (g):", grams_protein, "Water (g): ", grams_water)
'''
#Justin

'''
pump = Pin(38, Pin.OUT)

def pump_on():
    pump.value(1) 

def pump_off():
    pump.value(0) 

def pump_pulse(duration):
    pump_on()
    time.sleep(duration)
    pump_off() 

while True:
    pump_pulse(1)
'''   

'''
def handle_button(button_state, context_state):
    """
    Handles button logic for any project where a button is involved.

    Modifies the global variables: timer, is_pressed, is_held, led_on.

    Parameters:
        button_state (bool): Current state of the button (e.g., pressed/released, True/False).
        context_state (str): Context-dependent state (e.g., 'ACTIVE', 'INACTIVE').
    """
    global timer, is_pressed, is_held, led_on

    if context_state == 'ACTIVE' and button_state and timer > 0:
        if not is_pressed:
            is_pressed = True
        if is_pressed and not is_held:
            led_on = not led_on  # Toggle output state
        is_held = True
    elif context_state == 'INACTIVE':
        led_on = False
        timer = 0
    else:
        is_pressed = False
        is_held = False
'''
    

